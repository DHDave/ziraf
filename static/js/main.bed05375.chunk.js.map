{"version":3,"sources":["component/Navigation/Images/cute-giraffe.svg","component/Home/Home.js","component/Team/Team.js","component/Jobs/Jobs.js","component/ContactUs/ContactUs.js","component/PageNotFound/PageNotFound.js","component/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Team","Jobs","ContactUs","PageNotFound","Navbar","className","lib_default","src","logo","height","width","react_router_dom","to","react_router","exact","path","component","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wSCSzBC,EAPF,kBACXC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBADF,qBCMaC,EAPF,kBACXH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBADF,SCMaE,EAPF,kBACXJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBADF,cCMaG,EAPG,kBAChBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBADF,mBCWaI,EAZM,kBACjBN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kCAEJF,EAAAC,EAAAC,cAAA,yGCIO,SAASK,IACtB,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,QACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CACES,IAAKC,IACLC,OAAS,GACTC,MAAQ,OAIdb,EAAAC,EAAAC,cAAA,OAAKM,UAAU,QACbR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,KAAZ,QAAL,KACAf,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,SAAZ,QAAL,KACAf,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,SAAZ,QAAL,KACAf,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,cAAZ,cAAL,QAINf,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aACbR,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjCC,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWhB,IAC/BH,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWf,IAC/BJ,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWd,IACpCL,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOG,UAAWb,iBCvBbc,mLAVX,OACEpB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACK,EAAD,eALQc,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL5B,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAAC2B,EAAD,OACWC,SAASC,eAAe,SDsHrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bed05375.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cute-giraffe.f30721a2.svg\";","import React from 'react';\n\nconst Home = () => (\n  <div>\n    <h2>Home</h2>\n    Welcome Zirafer!\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\n\nconst Team = () => (\n  <div>\n    <h2>Team</h2>\n    Team\n  </div>\n);\n\nexport default Team;","import React from 'react';\n\nconst Jobs = () => (\n  <div>\n    <h2>Jobs</h2>\n    Job Board\n  </div>\n);\n\nexport default Jobs;\n","import React from 'react';\n\nconst ContactUs = () => (\n  <div>\n    <h2>Contact Us</h2>\n    ContactUs page\n  </div>\n);\n\nexport default ContactUs;","import React from 'react';\n\nconst PageNotFound = () => (\n    <div>\n        <div>\n            <h2>Ooops!</h2>\n            <h4>URL does not exist.</h4>\n        </div>\n        <div>\n            No worries its probably a typo... Click on a menu item to return!\n        </div>\n  </div>\n);\n\nexport default PageNotFound;","import React, { Component } from 'react';\nimport { Route, NavLink, Switch } from 'react-router-dom';\nimport Image from 'react-image-resizer';\n\nimport Home from '../Home/Home';\nimport Team from '../Team/Team';\nimport Jobs from '../Jobs/Jobs';\nimport ContactUs from '../ContactUs/ContactUs';\nimport PageNotFound from '../PageNotFound/PageNotFound';\nimport logo from './Images/cute-giraffe.svg';\nimport  \"./Navigation.css\"\n\nexport default function Navbar() {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <div className=\"logo\">\n          <div className=\"img\"> \n            <Image\n              src={logo}\n              height={ 60 }\n              width={ 60 }\n            />\n          </div>\n        </div> \n        <div className=\"menu\">\n          <ul>\n            <li> <NavLink to=\"/\">Home</NavLink> </li>\n            <li> <NavLink to=\"/Team\">Team</NavLink> </li>\n            <li> <NavLink to=\"/Jobs\">Jobs</NavLink> </li>\n            <li> <NavLink to=\"/ContactUs\">Contact Us</NavLink> </li>                \n          </ul>\n        </div>\n      </header>\n      <div className=\"App-intro\">\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/Team\" component={Team}/>\n          <Route path=\"/Jobs\" component={Jobs}/>\n          <Route path=\"/ContactUs\" component={ContactUs}/>\n          <Route component={PageNotFound}/>\n        </Switch>\n      </div>  \n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport Navigation from './component/Navigation/Navigation';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Navigation />\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { HashRouter } from \"react-router-dom\"\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>, document.getElementById('root'));\n    \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}